{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230\u6df1\u6d77\u5927\u83e0\u841d\ud83d\udc19 \u00b6 Resources section \u00b6 \u5173\u4e8e\u5404oj\u7684\u4ecb\u7ecd \u5173\u4e8e\u5e73\u65f6\u53ef\u80fd\u6709\u7528\u7684\u8d44\u6e90 Codeforces section \u00b6 \u677f\u5237 ( \u867d\u7136\u5f00\u59cb\u5237\u4e86\u4f46\u8fd8\u6ca1\u5b8c\u5168\u5f00\u59cb\u5237.jpg ) ICPC/CCPC section \u00b6 \u5237\u9898\u4ee5\u53ca\u6bd4\u8d5b\u540e\u8865\u9898 Virtual Judge section \u00b6 Kuangbin\u7684\u9898 Leetcode section \u00b6 \u6bd4\u8d5b\u548c\u5e73\u65f6\u7684\u9898 Miscellaneous section \u00b6 \u6742\u9879 About section \u00b6 \u5173\u4e8e","title":"\u4ecb\u7ecd"},{"location":"#_1","text":"","title":"\u6b22\u8fce\u6765\u5230\u6df1\u6d77\u5927\u83e0\u841d\ud83d\udc19"},{"location":"#resources-section","text":"\u5173\u4e8e\u5404oj\u7684\u4ecb\u7ecd \u5173\u4e8e\u5e73\u65f6\u53ef\u80fd\u6709\u7528\u7684\u8d44\u6e90","title":"Resources section"},{"location":"#codeforces-section","text":"\u677f\u5237 ( \u867d\u7136\u5f00\u59cb\u5237\u4e86\u4f46\u8fd8\u6ca1\u5b8c\u5168\u5f00\u59cb\u5237.jpg )","title":"Codeforces section"},{"location":"#icpcccpc-section","text":"\u5237\u9898\u4ee5\u53ca\u6bd4\u8d5b\u540e\u8865\u9898","title":"ICPC/CCPC section"},{"location":"#virtual-judge-section","text":"Kuangbin\u7684\u9898","title":"Virtual Judge section"},{"location":"#leetcode-section","text":"\u6bd4\u8d5b\u548c\u5e73\u65f6\u7684\u9898","title":"Leetcode section"},{"location":"#miscellaneous-section","text":"\u6742\u9879","title":"Miscellaneous section"},{"location":"#about-section","text":"\u5173\u4e8e","title":"About section"},{"location":"about/","text":"\u5173\u4e8e \u00b6 \u53ea\u662f\u60f3\u5230\u9700\u8981\u4e00\u4e2a\u7f51\u7ad9\u5b58\u50a8\u4e00\u4e9b\u601d\u8003, \u6240\u4ee5\u5c31\u8fd9\u4e48\u505a\u4e86 \u5176\u4ed6 \u00b6 \u5982\u679c\u89c9\u5f97\u5199\u7684\u4e0d\u597d, \u8bf7\u76f4\u63a5pull request\ud83d\udc7b \u5982\u679c\u89c9\u5f97\u6709\u5e2e\u52a9, \u90a3\u5f53\u7136\u662f\u975e\u5e38\u597d\u7684\u5566~","title":"intro"},{"location":"about/#_1","text":"\u53ea\u662f\u60f3\u5230\u9700\u8981\u4e00\u4e2a\u7f51\u7ad9\u5b58\u50a8\u4e00\u4e9b\u601d\u8003, \u6240\u4ee5\u5c31\u8fd9\u4e48\u505a\u4e86","title":"\u5173\u4e8e"},{"location":"about/#_2","text":"\u5982\u679c\u89c9\u5f97\u5199\u7684\u4e0d\u597d, \u8bf7\u76f4\u63a5pull request\ud83d\udc7b \u5982\u679c\u89c9\u5f97\u6709\u5e2e\u52a9, \u90a3\u5f53\u7136\u662f\u975e\u5e38\u597d\u7684\u5566~","title":"\u5176\u4ed6"},{"location":"index_mm/","text":"\u6697\u9ed1\u6a21\u5f0f\u5207\u6362 \u00b6 \u9ed8\u8ba4\u4f7f\u7528 \\(dark\\ mode\\) , \u53ef\u4ee5\u901a\u8fc7\u5bfc\u822a\u680f\u6309\u94ae\u6765\u5207\u6362\u89c6\u56fe\u3002 \u8bbf\u95ee\u7f13\u6162 \u00b6 \u53ef\u4ee5\u66f4\u6362\u7f51\u5740: https://dicarbene.gitee.io/solutions \uff08\u53ef\u80fd\u5b58\u5728\u5185\u5bb9\u66f4\u65b0\u4e0d\u53ca\u65f6\u7684\u60c5\u51b5\uff09","title":"\u6742\u9879"},{"location":"index_mm/#_1","text":"\u9ed8\u8ba4\u4f7f\u7528 \\(dark\\ mode\\) , \u53ef\u4ee5\u901a\u8fc7\u5bfc\u822a\u680f\u6309\u94ae\u6765\u5207\u6362\u89c6\u56fe\u3002","title":"\u6697\u9ed1\u6a21\u5f0f\u5207\u6362"},{"location":"index_mm/#_2","text":"\u53ef\u4ee5\u66f4\u6362\u7f51\u5740: https://dicarbene.gitee.io/solutions \uff08\u53ef\u80fd\u5b58\u5728\u5185\u5bb9\u66f4\u65b0\u4e0d\u53ca\u65f6\u7684\u60c5\u51b5\uff09","title":"\u8bbf\u95ee\u7f13\u6162"},{"location":"resources_learn/","text":"","title":"Learning resources"},{"location":"resources_oj/","text":"OJ \u4ecb\u7ecd \u00b6 \u58f0\u660e \u00b6 \u4ec5\u4e3a\u4e2a\u4eba\u611f\u53d7 Codeforces \u00b6 A famous website for competitive programmers. \u5bf9\u4e8e\u7b97\u6cd5\u7ade\u8d5b\u9009\u624b\u6765\u8bf4\u5bb6\u55bb\u6237\u6653\u7684\u4e00\u4e2a\u7f51\u7ad9\uff0c\u8bad\u7ec3\u65f6\u6216\u591a\u6216\u5c11\u90fd\u4f1a\u7528\u5230\u7684\u4e00\u4e2a\u7f51\u7ad9\u3002Codeforces\u4e0arating\u5bf9\u5e94handle\u989c\u8272\u7684\u673a\u5236\u8ba9\u4eba\u53c8\u7231\u53c8\u6068\u3002\u60f3\u5feb\u901f\u627e\u5230\u6bd4\u8d5b\u7684\u624b\u611f\u5c31\u6765\u6253cf\u5427~ div1 \u51c6\u5907icpc\u6700\u7ec8\u9700\u8981\u51c6\u5907\u5230\u7684\u96be\u5ea6\u3002 div2 ab\u4e00\u822c\u4e3a\u7b7e\u5230\u601d\u7ef4\u9898\uff0c\u5957\u8def\u5f88\u591a\uff0c\u731c\u5bf9\u7ed3\u8bba\u53ef\u4ee5\u5f88\u5feb\u505a\u51fa\u3002\u6570\u636e\u7ed3\u6784\u4e00\u822c\u4e0d\u4f1a\u592a\u96be\uff0c\u4e3b\u8981\u8fd8\u662f\u5728\u4e8e\u7efc\u5408\u80fd\u529b\u7684\u53d1\u6325\u3002 div3 \u7528\u6765\u627e\u56de\u81ea\u4fe1\u3002 div4 \u6bd4div3\u8fd8\u8981\u7b80\u5355\uff0c \u4f46\u662f\u533a\u522b\u4e0d\u5927\u3002 \u666e\u901a\u573a\u6b21\u6309\u6bcf\u9898\u5206\u6570\u6392\u540d\uff0c\u6559\u80b2 (educational) \u573a\u6b21\u6309\u8fc7\u9898\u6570\u4e0e\u7f5a\u65f6\u6392\u540d\u3002 \u5728\u4e00\u573a\u6bd4\u8d5b\u524d\uff0c\u8fdb\u884c\u4e86\u63d0\u524d\u6ce8\u518c\u540e\uff0c\u53ef\u4ee5\u5728\u6bd4\u8d5b\u65f6\u5728\u4e3b\u7ad9\u56e0\u4e3a\u5404\u79cd\u539f\u56e0\u51fa\u73b0\u6545\u969c\u5bfc\u81f4\u4e0d\u53ef\u4f7f\u7528\u65f6\uff08\u5305\u62ec\u4e0d\u9650\u4e8e\uff1a\u4e3b\u7ad9\u6302\u4e86\u3001\u8bc4\u6d4b\u673a\u6302\u4e86\u3001\u8bc4\u6d4b\u961f\u5217\u70b8\u4e86\u7b49\u7b49\uff09\u53ef\u4ee5\u4f7f\u7528\u8f7b\u91cf\u7ea7\u7684\u526f\u7ad9\uff1a codeforces.m1 \u3001 codeforcesm2 \u3001 codeforces.m3 \u8bbf\u95ee\u7f13\u6162\u53ef\u4ee5\u4f7f\u7528ml\u955c\u50cf\u7ad9\uff08\u4f46\u662f\u4e3b\u7ad9\u5d29\u4e86\u955c\u50cf\u7ad9\u4e5f\u4e0d\u4e00\u5b9a\u597d\u4f7f\uff09\uff1a https://codeforces.ml/ Atcoder \u00b6 \u4e00\u4e2a\u77e5\u540d\u7684\u65e5\u672coj\uff0c\u7ecf\u5e38\u4e0eCodeforces\u540c\u65f6\u5217\u51fa\u3002 \u76f8\u8f83\u4e8ecodeforces\u6765\u8bf4\uff0c\u8bc4\u6d4b\u901f\u5ea6\u66f4\u5feb\uff0c\u9898\u9762\u66f4\u52a0\u7b80\u77ed\u4e00\u4e9b\u3002 \u666e\u901a\u573a\u6b21\u5206\u4e3a\u4e09\u79cd\uff0c\u6309\u96be\u5ea6\u6392\u5217 Atcoder Grand Contest \u76f8\u5f53\u4e8ecf-div1 Atcoder Regular Contest \u76f8\u5f53\u4e8ecf-div2 Atcoder Beginner Contest \u76f8\u5f53\u4e8ecf-div3 Virtual Judge \u00b6 \u77e5\u540d\u7684\u6574\u5408\u578boj\uff0c\u53ef\u4ee5\u5728\u4e0a\u9762\u5237\u8bb8\u591a\u77e5\u540doj\u7684\u9898\uff0c\u6bd4\u5982poj\u3001hdoj\u3001uva\u3001cf\u3001spoj\u7b49\u7b49\u3002 \u5176\u4e0a\u5305\u542b\u8457\u540d\u7684: \u201cKuangbin\u5e26\u4f60\u98de\u201d\u9898\u96c6\uff1a https://vjudge.net/article/187 \"\u5218\u6c5d\u4f73\u5927\u767d\u4e66\u9898\u5355\": https://vjudge.net/article/61 \"\u5218\u6c5d\u4f73\u7d2b\u4e66\u9898\u5355(\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178 \u7b2c\u4e8c\u7248 2014)\": https://vjudge.net/article/45 Nowcoder/\u725b\u5ba2 \u00b6 \u4e2d\u56fd\u7684\u77e5\u540doj\uff0c\u4e0eicpc\u8fdb\u884c\u4e86\u5408\u4f5c\u3002icpc/ccpc\u7684\u9898\u76ee\u53ef\u4ee5\u5728\u725b\u5ba2oj\u4e0a\u9762\u8fdb\u884c\u63d0\u4ea4\u3002 Luogu/\u6d1b\u8c37 \u00b6 \u5bf9\u4e8eoier\u5341\u5206\u719f\u6089\u7684oj\uff0cnoip\u6c1b\u56f4\u6d53\u539a\uff0c\u4e0d\u8fc7\u7531\u4e8e\u51fa\u8272\u7684\u4f7f\u7528\u4f53\u9a8c\u4ee5\u53ca\u4e30\u5bcc\u7684\u9898\u89e3\uff0c\u5728ACM\u7684\u51c6\u5907\u8fc7\u7a0b\u4e2d\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u3002 \u6d1b\u8c37\u8fd8\u53ef\u4ee5\u7528\u6765\u63d0\u4ea4uva\u4ee5\u53cacf\u7684\u9898\u76ee\uff0c\u4e0a\u9762\u8fd8\u6709\u6574\u7406\u597d\u7684usaco\u9898\u76ee\u7684\u5408\u96c6\u3002 Leetcode \u00b6 \u4e3b\u8981\u662f\u9762\u5411\u6c42\u804c\u627e\u5de5\u4f5c\u7684oj\uff0c\u7c7b\u4f3c\u7684\u8fd8\u6709 Lintcode \u3001 Hackerrank \u7528\u6765\u51c6\u5907ACM\u5e76\u4e0d\u592a\u9002\u5408\uff0c\u4f46\u662f\u5bf9\u4e8e\u638c\u63e1\u4e00\u4e9b\u57fa\u672c\u7684\u7b97\u6cd5\u6982\u5ff5\u4ee5\u53ca\u590d\u4e60\u6570\u636e\u7ed3\u6784\u8bfe\u7a0b\u8fd8\u662f\u633a\u597d\u7684\u3002 \u6bcf\u5468\u6709\u5468\u65e5\u8d5b\uff0c\u6bcf\u53cc\u5468\u5468\u516d\u665a\u6709\u53cc\u5468\u8d5b\u3002 Codechef \u00b6 \u4e00\u4e2a\u5728\u56fd\u5916\u77e5\u540d\u7684\u5370\u5ea6oj\uff0c\u4e3a\u56fd\u5916\u9009\u624b\u5e7f\u6cdb\u4f7f\u7528\u4ee5\u51c6\u5907icpc\u7684oj\u3002\u4e0a\u9762\u6709\u6bd4\u8f83\u4e30\u5bcc\u7684\u5b66\u4e60\u6307\u5bfc\u4e0e\u9898\u76ee\u8d44\u6e90\uff0c\u82f1\u6587\u597d\u7684\u540c\u5b66\u53ef\u4ee5\u524d\u53bb\u5b66\u4e60\u3002 SPOJ \u00b6 \u5916\u7f51\u77e5\u540d\u7684\u73b0\u4ee3oj\u4e4b\u4e00\u3002 Hackerrank \u00b6 \u7c7b\u4f3c\u4e8eleetcode\u7684\u4e00\u4e2aoj\uff0c\u9898\u76ee\u4ee3\u7801\u63d0\u4ea4\u65b9\u5f0f\u6bd4\u8f83\u81ea\u7531\u3002 USACO \u00b6 \u7f8e\u56fd\u9ad8\u4e2doier\u4f7f\u7528\u7684oj\uff0c\u5176\u4e2d\u7684\u9898\u96c6\u5e7f\u4e3a\u4eba\u77e5\u3002\u9875\u9762\u8f83\u8001\uff0c\u53ef\u4ee5\u9009\u62e9\u5728\u6d1b\u8c37\u4e0a\u9762\u63d0\u4ea4\u3002 Euler Project \u00b6 \u4ee5\u5404\u79cd\u6570\u5b66\u95ee\u9898\u586b\u7a7a\u9898\u7ec4\u6210\uff0c\u53ea\u9700\u8981\u63d0\u4ea4\u9898\u76ee\u7b54\u6848\u5373\u53ef\u3002 OJs that fit in just right in Vjudge \u00b6 poj \u9875\u9762\u8f83\u8001\uff0c\u627e\u9898\u4e0d\u592a\u65b9\u4fbf hdoj \u9875\u9762\u8f83\u8001\uff0c\u8d26\u53f7\u6ce8\u518c\u8f83\u7e41\u7410 uva \u7ecf\u5178oj\u4e4b\u4e00\uff0c\u5218\u6c5d\u4f73\u7684\u4e66\u4f7f\u7528\u7684oj\uff0c\u9875\u9762\u8f83\u8001\uff0c\u53ef\u4ee5\u4f7f\u7528udebug\u67e5\u8be2\u6570\u636e\u3002","title":"OJ introductions"},{"location":"resources_oj/#oj","text":"","title":"OJ \u4ecb\u7ecd"},{"location":"resources_oj/#_1","text":"\u4ec5\u4e3a\u4e2a\u4eba\u611f\u53d7","title":"\u58f0\u660e"},{"location":"resources_oj/#codeforces","text":"A famous website for competitive programmers. \u5bf9\u4e8e\u7b97\u6cd5\u7ade\u8d5b\u9009\u624b\u6765\u8bf4\u5bb6\u55bb\u6237\u6653\u7684\u4e00\u4e2a\u7f51\u7ad9\uff0c\u8bad\u7ec3\u65f6\u6216\u591a\u6216\u5c11\u90fd\u4f1a\u7528\u5230\u7684\u4e00\u4e2a\u7f51\u7ad9\u3002Codeforces\u4e0arating\u5bf9\u5e94handle\u989c\u8272\u7684\u673a\u5236\u8ba9\u4eba\u53c8\u7231\u53c8\u6068\u3002\u60f3\u5feb\u901f\u627e\u5230\u6bd4\u8d5b\u7684\u624b\u611f\u5c31\u6765\u6253cf\u5427~ div1 \u51c6\u5907icpc\u6700\u7ec8\u9700\u8981\u51c6\u5907\u5230\u7684\u96be\u5ea6\u3002 div2 ab\u4e00\u822c\u4e3a\u7b7e\u5230\u601d\u7ef4\u9898\uff0c\u5957\u8def\u5f88\u591a\uff0c\u731c\u5bf9\u7ed3\u8bba\u53ef\u4ee5\u5f88\u5feb\u505a\u51fa\u3002\u6570\u636e\u7ed3\u6784\u4e00\u822c\u4e0d\u4f1a\u592a\u96be\uff0c\u4e3b\u8981\u8fd8\u662f\u5728\u4e8e\u7efc\u5408\u80fd\u529b\u7684\u53d1\u6325\u3002 div3 \u7528\u6765\u627e\u56de\u81ea\u4fe1\u3002 div4 \u6bd4div3\u8fd8\u8981\u7b80\u5355\uff0c \u4f46\u662f\u533a\u522b\u4e0d\u5927\u3002 \u666e\u901a\u573a\u6b21\u6309\u6bcf\u9898\u5206\u6570\u6392\u540d\uff0c\u6559\u80b2 (educational) \u573a\u6b21\u6309\u8fc7\u9898\u6570\u4e0e\u7f5a\u65f6\u6392\u540d\u3002 \u5728\u4e00\u573a\u6bd4\u8d5b\u524d\uff0c\u8fdb\u884c\u4e86\u63d0\u524d\u6ce8\u518c\u540e\uff0c\u53ef\u4ee5\u5728\u6bd4\u8d5b\u65f6\u5728\u4e3b\u7ad9\u56e0\u4e3a\u5404\u79cd\u539f\u56e0\u51fa\u73b0\u6545\u969c\u5bfc\u81f4\u4e0d\u53ef\u4f7f\u7528\u65f6\uff08\u5305\u62ec\u4e0d\u9650\u4e8e\uff1a\u4e3b\u7ad9\u6302\u4e86\u3001\u8bc4\u6d4b\u673a\u6302\u4e86\u3001\u8bc4\u6d4b\u961f\u5217\u70b8\u4e86\u7b49\u7b49\uff09\u53ef\u4ee5\u4f7f\u7528\u8f7b\u91cf\u7ea7\u7684\u526f\u7ad9\uff1a codeforces.m1 \u3001 codeforcesm2 \u3001 codeforces.m3 \u8bbf\u95ee\u7f13\u6162\u53ef\u4ee5\u4f7f\u7528ml\u955c\u50cf\u7ad9\uff08\u4f46\u662f\u4e3b\u7ad9\u5d29\u4e86\u955c\u50cf\u7ad9\u4e5f\u4e0d\u4e00\u5b9a\u597d\u4f7f\uff09\uff1a https://codeforces.ml/","title":"Codeforces"},{"location":"resources_oj/#atcoder","text":"\u4e00\u4e2a\u77e5\u540d\u7684\u65e5\u672coj\uff0c\u7ecf\u5e38\u4e0eCodeforces\u540c\u65f6\u5217\u51fa\u3002 \u76f8\u8f83\u4e8ecodeforces\u6765\u8bf4\uff0c\u8bc4\u6d4b\u901f\u5ea6\u66f4\u5feb\uff0c\u9898\u9762\u66f4\u52a0\u7b80\u77ed\u4e00\u4e9b\u3002 \u666e\u901a\u573a\u6b21\u5206\u4e3a\u4e09\u79cd\uff0c\u6309\u96be\u5ea6\u6392\u5217 Atcoder Grand Contest \u76f8\u5f53\u4e8ecf-div1 Atcoder Regular Contest \u76f8\u5f53\u4e8ecf-div2 Atcoder Beginner Contest \u76f8\u5f53\u4e8ecf-div3","title":"Atcoder"},{"location":"resources_oj/#virtual-judge","text":"\u77e5\u540d\u7684\u6574\u5408\u578boj\uff0c\u53ef\u4ee5\u5728\u4e0a\u9762\u5237\u8bb8\u591a\u77e5\u540doj\u7684\u9898\uff0c\u6bd4\u5982poj\u3001hdoj\u3001uva\u3001cf\u3001spoj\u7b49\u7b49\u3002 \u5176\u4e0a\u5305\u542b\u8457\u540d\u7684: \u201cKuangbin\u5e26\u4f60\u98de\u201d\u9898\u96c6\uff1a https://vjudge.net/article/187 \"\u5218\u6c5d\u4f73\u5927\u767d\u4e66\u9898\u5355\": https://vjudge.net/article/61 \"\u5218\u6c5d\u4f73\u7d2b\u4e66\u9898\u5355(\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178 \u7b2c\u4e8c\u7248 2014)\": https://vjudge.net/article/45","title":"Virtual Judge"},{"location":"resources_oj/#nowcoder","text":"\u4e2d\u56fd\u7684\u77e5\u540doj\uff0c\u4e0eicpc\u8fdb\u884c\u4e86\u5408\u4f5c\u3002icpc/ccpc\u7684\u9898\u76ee\u53ef\u4ee5\u5728\u725b\u5ba2oj\u4e0a\u9762\u8fdb\u884c\u63d0\u4ea4\u3002","title":"Nowcoder/\u725b\u5ba2"},{"location":"resources_oj/#luogu","text":"\u5bf9\u4e8eoier\u5341\u5206\u719f\u6089\u7684oj\uff0cnoip\u6c1b\u56f4\u6d53\u539a\uff0c\u4e0d\u8fc7\u7531\u4e8e\u51fa\u8272\u7684\u4f7f\u7528\u4f53\u9a8c\u4ee5\u53ca\u4e30\u5bcc\u7684\u9898\u89e3\uff0c\u5728ACM\u7684\u51c6\u5907\u8fc7\u7a0b\u4e2d\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u3002 \u6d1b\u8c37\u8fd8\u53ef\u4ee5\u7528\u6765\u63d0\u4ea4uva\u4ee5\u53cacf\u7684\u9898\u76ee\uff0c\u4e0a\u9762\u8fd8\u6709\u6574\u7406\u597d\u7684usaco\u9898\u76ee\u7684\u5408\u96c6\u3002","title":"Luogu/\u6d1b\u8c37"},{"location":"resources_oj/#leetcode","text":"\u4e3b\u8981\u662f\u9762\u5411\u6c42\u804c\u627e\u5de5\u4f5c\u7684oj\uff0c\u7c7b\u4f3c\u7684\u8fd8\u6709 Lintcode \u3001 Hackerrank \u7528\u6765\u51c6\u5907ACM\u5e76\u4e0d\u592a\u9002\u5408\uff0c\u4f46\u662f\u5bf9\u4e8e\u638c\u63e1\u4e00\u4e9b\u57fa\u672c\u7684\u7b97\u6cd5\u6982\u5ff5\u4ee5\u53ca\u590d\u4e60\u6570\u636e\u7ed3\u6784\u8bfe\u7a0b\u8fd8\u662f\u633a\u597d\u7684\u3002 \u6bcf\u5468\u6709\u5468\u65e5\u8d5b\uff0c\u6bcf\u53cc\u5468\u5468\u516d\u665a\u6709\u53cc\u5468\u8d5b\u3002","title":"Leetcode"},{"location":"resources_oj/#codechef","text":"\u4e00\u4e2a\u5728\u56fd\u5916\u77e5\u540d\u7684\u5370\u5ea6oj\uff0c\u4e3a\u56fd\u5916\u9009\u624b\u5e7f\u6cdb\u4f7f\u7528\u4ee5\u51c6\u5907icpc\u7684oj\u3002\u4e0a\u9762\u6709\u6bd4\u8f83\u4e30\u5bcc\u7684\u5b66\u4e60\u6307\u5bfc\u4e0e\u9898\u76ee\u8d44\u6e90\uff0c\u82f1\u6587\u597d\u7684\u540c\u5b66\u53ef\u4ee5\u524d\u53bb\u5b66\u4e60\u3002","title":"Codechef"},{"location":"resources_oj/#spoj","text":"\u5916\u7f51\u77e5\u540d\u7684\u73b0\u4ee3oj\u4e4b\u4e00\u3002","title":"SPOJ"},{"location":"resources_oj/#hackerrank","text":"\u7c7b\u4f3c\u4e8eleetcode\u7684\u4e00\u4e2aoj\uff0c\u9898\u76ee\u4ee3\u7801\u63d0\u4ea4\u65b9\u5f0f\u6bd4\u8f83\u81ea\u7531\u3002","title":"Hackerrank"},{"location":"resources_oj/#usaco","text":"\u7f8e\u56fd\u9ad8\u4e2doier\u4f7f\u7528\u7684oj\uff0c\u5176\u4e2d\u7684\u9898\u96c6\u5e7f\u4e3a\u4eba\u77e5\u3002\u9875\u9762\u8f83\u8001\uff0c\u53ef\u4ee5\u9009\u62e9\u5728\u6d1b\u8c37\u4e0a\u9762\u63d0\u4ea4\u3002","title":"USACO"},{"location":"resources_oj/#euler-project","text":"\u4ee5\u5404\u79cd\u6570\u5b66\u95ee\u9898\u586b\u7a7a\u9898\u7ec4\u6210\uff0c\u53ea\u9700\u8981\u63d0\u4ea4\u9898\u76ee\u7b54\u6848\u5373\u53ef\u3002","title":"Euler Project"},{"location":"resources_oj/#ojs-that-fit-in-just-right-in-vjudge","text":"poj \u9875\u9762\u8f83\u8001\uff0c\u627e\u9898\u4e0d\u592a\u65b9\u4fbf hdoj \u9875\u9762\u8f83\u8001\uff0c\u8d26\u53f7\u6ce8\u518c\u8f83\u7e41\u7410 uva \u7ecf\u5178oj\u4e4b\u4e00\uff0c\u5218\u6c5d\u4f73\u7684\u4e66\u4f7f\u7528\u7684oj\uff0c\u9875\u9762\u8f83\u8001\uff0c\u53ef\u4ee5\u4f7f\u7528udebug\u67e5\u8be2\u6570\u636e\u3002","title":"OJs that fit in just right in Vjudge"},{"location":"cf/1000/","text":"","title":"Rating 1900"},{"location":"icpc/kunming_2021_spring/a/","text":"2021 icpc \u6606\u660e\u9898\u89e3\u62a5\u544a \u00b6 A. ac \u00b6","title":"A.ac"},{"location":"icpc/kunming_2021_spring/a/#2021-icpc","text":"","title":"2021 icpc \u6606\u660e\u9898\u89e3\u62a5\u544a"},{"location":"icpc/kunming_2021_spring/a/#a-ac","text":"","title":"A. ac"},{"location":"icpc/kunming_2021_spring/b/","text":"","title":"B"},{"location":"mm/t1/","text":"","title":"USACO"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A%20201403-4/","text":"\u8bd5\u9898\u7f16\u53f7\uff1a 201403-4 \u00b6 \u8bd5\u9898\u540d\u79f0\uff1a \u65e0\u7ebf\u7f51\u7edc \u00b6 \u65f6\u95f4\u9650\u5236\uff1a 1.0s \u00b6 \u5185\u5b58\u9650\u5236\uff1a 256.0MB \u00b6 \u95ee\u9898\u63cf\u8ff0 \u00b6 \u539f\u9898\u94fe\u63a5: http://118.190.20.162/view.page?gpid=T7 \u200b \u76ee\u524d\u5728\u4e00\u4e2a\u5f88\u5927\u7684\u5e73\u9762\u623f\u95f4\u91cc\u6709 n \u4e2a\u65e0\u7ebf\u8def\u7531\u5668,\u6bcf\u4e2a\u65e0\u7ebf\u8def\u7531\u5668\u90fd\u56fa\u5b9a\u5728\u67d0\u4e2a\u70b9\u4e0a\u3002\u4efb\u4f55\u4e24\u4e2a\u65e0\u7ebf\u8def\u7531\u5668\u53ea\u8981\u8ddd\u79bb\u4e0d\u8d85\u8fc7 r \u5c31\u80fd\u4e92\u76f8\u5efa\u7acb\u7f51\u7edc\u8fde\u63a5\u3002 \u3000\u3000\u9664\u6b64\u4ee5\u5916,\u53e6\u6709 m \u4e2a\u53ef\u4ee5\u6446\u653e\u65e0\u7ebf\u8def\u7531\u5668\u7684\u4f4d\u7f6e\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u4e9b\u4f4d\u7f6e\u4e2d\u9009\u62e9\u81f3\u591a k \u4e2a\u589e\u8bbe\u65b0\u7684\u8def\u7531\u5668\u3002 \u3000\u3000\u4f60\u7684\u76ee\u6807\u662f\u4f7f\u5f97\u7b2c 1 \u4e2a\u8def\u7531\u5668\u548c\u7b2c 2 \u4e2a\u8def\u7531\u5668\u4e4b\u95f4\u7684\u7f51\u7edc\u8fde\u63a5\u7ecf\u8fc7\u5c3d\u91cf\u5c11\u7684\u4e2d\u8f6c\u8def\u7531\u5668\u3002\u8bf7\u95ee\u5728\u6700\u4f18\u65b9\u6848\u4e0b\u4e2d\u8f6c\u8def\u7531\u5668\u7684\u6700\u5c11\u4e2a\u6570\u662f\u591a\u5c11? \u8f93\u5165\u683c\u5f0f \u00b6 \u200b \u7b2c\u4e00\u884c\u5305\u542b\u56db\u4e2a\u6b63\u6574\u6570 n,m,k,r\u3002(2 \u2264 n \u2264 100,1 \u2264 k \u2264 m \u2264 100, 1 \u2264 r \u2264 108)\u3002 \u3000\u3000\u63a5\u4e0b\u6765 n \u884c,\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 xi \u548c yi,\u8868\u793a\u4e00\u4e2a\u5df2\u7ecf\u653e\u7f6e\u597d\u7684\u65e0\u7ebf \u8def\u7531\u5668\u5728 (xi, yi) \u70b9\u5904\u3002\u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u7b2c 1 \u548c\u7b2c 2 \u4e2a\u8def\u7531\u5668\u5728\u4ec5\u6709\u8fd9 n \u4e2a\u8def\u7531\u5668\u7684\u60c5\u51b5\u4e0b\u5df2\u7ecf\u53ef\u4ee5\u4e92\u76f8\u8fde\u63a5(\u7ecf\u8fc7\u4e00\u7cfb\u5217\u7684\u4e2d\u8f6c\u8def\u7531\u5668)\u3002 \u3000\u3000\u63a5\u4e0b\u6765 m \u884c,\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 xi \u548c yi,\u8868\u793a (xi, yi) \u70b9\u5904\u53ef\u4ee5\u589e\u8bbe \u4e00\u4e2a\u8def\u7531\u5668\u3002 \u3000\u3000\u8f93\u5165\u4e2d\u6240\u6709\u7684\u5750\u6807\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 108,\u4fdd\u8bc1\u8f93\u5165\u4e2d\u7684\u5750\u6807\u5404\u4e0d\u76f8\u540c\u3002 \u8f93\u51fa\u683c\u5f0f \u00b6 \u8f93\u51fa\u53ea\u6709\u4e00\u4e2a\u6570,\u5373\u5728\u6307\u5b9a\u7684\u4f4d\u7f6e\u4e2d\u589e\u8bbe k \u4e2a\u8def\u7531\u5668\u540e,\u4ece\u7b2c 1 \u4e2a\u8def \u7531\u5668\u5230\u7b2c 2 \u4e2a\u8def\u7531\u5668\u6700\u5c11\u7ecf\u8fc7\u7684\u4e2d\u8f6c\u8def\u7531\u5668\u7684\u4e2a\u6570\u3002 \u6837\u4f8b\u8f93\u5165 \u00b6 5 3 1 3 0 0 5 5 0 3 0 5 3 5 3 3 4 4 3 0 \u6837\u4f8b\u8f93\u51fa \u00b6 2 \u601d\u8def \u00b6 \u8fd9\u9053\u9898\u76ee\u7684\u57fa\u7840\u662f\u901a\u8fc7\u8282\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u5224\u65ad\u8282\u70b9\u4e4b\u95f4\u662f\u5426\u8fde\u901a\uff0c\u6c42\u51fa\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u6240\u9700\u7ecf\u8fc7\u7684\u6700\u5c0f\u4e2d\u8f6c\u6b21\u6570\u3002 \u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u662f\u56fe\u8bba\u5f53\u4e2d\u7684\u6c42\u4e24\u8282\u70b9\u4e4b\u95f4\u6700\u77ed\u8def\u5f84\u7684\u95ee\u9898\uff0c\u7b49\u540c\u4e8e\u5728\u6bcf\u5bf9\u76f4\u63a5\u8fde\u901a\u7684\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u4e3a1\u7684\u60c5\u51b5\u4e0b\uff08\u8fd9\u6837\u6c42\u51fa\u6700\u77ed\u8def\u5f84\u5c31\u7b49\u540c\u4e8e\u6c42\u51fa\u6700\u5c0f\u4e2d\u8f6c\u6b21\u6570\uff09\uff0c\u6c42\u51fa\u4e24\u8282\u70b9\u4e4b\u95f4\u6700\u77ed\u8def\u5f84\u7684\u95ee\u9898\u3002 \u7528\u7ed3\u6784\u4f53\u5b9a\u4e49\u6bcf\u4e2a\u8282\u70b9\uff0c\u7ed3\u6784\u4f53\u4e4b\u4e2d\u8bbe\u7f6e\u4e00\u4e2ak\u503c\u6765\u4ee3\u8868\u5f53\u904d\u5386\u5230\u5f53\u524d\u8282\u70b9\u65f6\u6240\u9009\u7684\u989d\u5916\u8282\u70b9\u7684\u6570\u76ee\uff0c\u901a\u8fc7\u8fd9\u4e2a\u6570\u76ee\u7684\u5927\u5c0f\u6765\u5224\u65ad\u4e0b\u4e00\u6b65\u5e94\u8be5\u5728\u4ec0\u4e48\u8303\u56f4\u7684\u8282\u70b9\u5185\u904d\u5386\u3002 AC\u4ee3\u7801 \u00b6 #pragma GCC optimize(3, \"Ofast\", \"inline\") #include <bits/stdc++.h> #define start ios::sync_with_stdio(false);cin.tie(0);cout.tie(0); #define rep(z, x, y) for(int z=x;z<=y;++z) #define repd(z, x, y) for(int z=x;z>=y;--z) #define ft first #define sd second #define pb push_back const int maxn = 205 ; const int mod = 998244353 ; long long n , m , k , r , max1 = -1 ; bool vis [ maxn ]; using namespace std ; struct node { long long x , y , k ; int step ; node () { step = k = 0 ; } node ( int x1 , int y1 , int s1 , int k1 ) { x = x1 ; y = y1 ; step = s1 ; k = k1 ;} } mmp [ maxn ]; int bfs ( int beg , int ed ){ queue < node > Q ; Q . push ( node ( mmp [ beg ]. x , mmp [ beg ]. y , 0 , 0 )); vis [ beg ] = true ; while ( ! Q . empty ()) { node s = Q . front (); Q . pop (); if ( s . x == mmp [ ed ]. x && s . y == mmp [ ed ]. y ) return s . step - 1 ; //\u6c42\u51fa\u4e2d\u8f6c\u4e2a\u6570 if ( s . k == k ) max1 = n ; // \u5f53\u524dk\u503c\u4e00\u65e6\u5230\u8fbek\u65f6\u53ea\u80fd\u5728n\u91cc\u9762\u8d70\uff0c\u4e0d\u80fd\u7528mmp[n]\u4e4b\u5916\u7684\u8282\u70b9\u4e86 else max1 = n + m ; for ( int i = 1 ; i <= max1 ; ++ i ) { if ( vis [ i ]) continue ; if (( mmp [ i ]. x - s . x ) * ( mmp [ i ]. x - s . x ) + ( mmp [ i ]. y - s . y ) * ( mmp [ i ]. y - s . y ) > r * r ) continue ; //\u8ddd\u79bb\u4e0d\u591f\u5c31\u4e0d\u8d70 vis [ i ] = true ; int kk ; if ( i > n ) kk = s . k + 1 ; else kk = s . k ; //\u6839\u636e\u5f53\u524d\u8282\u70b9\u7684\u7c7b\u578b\u51b3\u5b9a\u662f\u5426\u52a0k\u503c Q . push ( node ( mmp [ i ]. x , mmp [ i ]. y , s . step + 1 , kk )); } } } int main () { cin >> n >> m >> k >> r ; rep ( i , 1 , n + m ) cin >> mmp [ i ]. x >> mmp [ i ]. y ; cout << bfs ( 1 , 2 ); //\u8f93\u5165\u7ed3\u679c return 0 ; }","title":"201403-4"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A%20201403-4/#201403-4","text":"","title":"\u8bd5\u9898\u7f16\u53f7\uff1a 201403-4"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A%20201403-4/#_1","text":"","title":"\u8bd5\u9898\u540d\u79f0\uff1a \u65e0\u7ebf\u7f51\u7edc"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A%20201403-4/#10s","text":"","title":"\u65f6\u95f4\u9650\u5236\uff1a   1.0s"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A%20201403-4/#2560mb","text":"","title":"\u5185\u5b58\u9650\u5236\uff1a    256.0MB"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A%20201403-4/#_2","text":"\u539f\u9898\u94fe\u63a5: http://118.190.20.162/view.page?gpid=T7 \u200b \u76ee\u524d\u5728\u4e00\u4e2a\u5f88\u5927\u7684\u5e73\u9762\u623f\u95f4\u91cc\u6709 n \u4e2a\u65e0\u7ebf\u8def\u7531\u5668,\u6bcf\u4e2a\u65e0\u7ebf\u8def\u7531\u5668\u90fd\u56fa\u5b9a\u5728\u67d0\u4e2a\u70b9\u4e0a\u3002\u4efb\u4f55\u4e24\u4e2a\u65e0\u7ebf\u8def\u7531\u5668\u53ea\u8981\u8ddd\u79bb\u4e0d\u8d85\u8fc7 r \u5c31\u80fd\u4e92\u76f8\u5efa\u7acb\u7f51\u7edc\u8fde\u63a5\u3002 \u3000\u3000\u9664\u6b64\u4ee5\u5916,\u53e6\u6709 m \u4e2a\u53ef\u4ee5\u6446\u653e\u65e0\u7ebf\u8def\u7531\u5668\u7684\u4f4d\u7f6e\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u4e9b\u4f4d\u7f6e\u4e2d\u9009\u62e9\u81f3\u591a k \u4e2a\u589e\u8bbe\u65b0\u7684\u8def\u7531\u5668\u3002 \u3000\u3000\u4f60\u7684\u76ee\u6807\u662f\u4f7f\u5f97\u7b2c 1 \u4e2a\u8def\u7531\u5668\u548c\u7b2c 2 \u4e2a\u8def\u7531\u5668\u4e4b\u95f4\u7684\u7f51\u7edc\u8fde\u63a5\u7ecf\u8fc7\u5c3d\u91cf\u5c11\u7684\u4e2d\u8f6c\u8def\u7531\u5668\u3002\u8bf7\u95ee\u5728\u6700\u4f18\u65b9\u6848\u4e0b\u4e2d\u8f6c\u8def\u7531\u5668\u7684\u6700\u5c11\u4e2a\u6570\u662f\u591a\u5c11?","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A%20201403-4/#_3","text":"\u200b \u7b2c\u4e00\u884c\u5305\u542b\u56db\u4e2a\u6b63\u6574\u6570 n,m,k,r\u3002(2 \u2264 n \u2264 100,1 \u2264 k \u2264 m \u2264 100, 1 \u2264 r \u2264 108)\u3002 \u3000\u3000\u63a5\u4e0b\u6765 n \u884c,\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 xi \u548c yi,\u8868\u793a\u4e00\u4e2a\u5df2\u7ecf\u653e\u7f6e\u597d\u7684\u65e0\u7ebf \u8def\u7531\u5668\u5728 (xi, yi) \u70b9\u5904\u3002\u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u7b2c 1 \u548c\u7b2c 2 \u4e2a\u8def\u7531\u5668\u5728\u4ec5\u6709\u8fd9 n \u4e2a\u8def\u7531\u5668\u7684\u60c5\u51b5\u4e0b\u5df2\u7ecf\u53ef\u4ee5\u4e92\u76f8\u8fde\u63a5(\u7ecf\u8fc7\u4e00\u7cfb\u5217\u7684\u4e2d\u8f6c\u8def\u7531\u5668)\u3002 \u3000\u3000\u63a5\u4e0b\u6765 m \u884c,\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 xi \u548c yi,\u8868\u793a (xi, yi) \u70b9\u5904\u53ef\u4ee5\u589e\u8bbe \u4e00\u4e2a\u8def\u7531\u5668\u3002 \u3000\u3000\u8f93\u5165\u4e2d\u6240\u6709\u7684\u5750\u6807\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 108,\u4fdd\u8bc1\u8f93\u5165\u4e2d\u7684\u5750\u6807\u5404\u4e0d\u76f8\u540c\u3002","title":"\u8f93\u5165\u683c\u5f0f"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A%20201403-4/#_4","text":"\u8f93\u51fa\u53ea\u6709\u4e00\u4e2a\u6570,\u5373\u5728\u6307\u5b9a\u7684\u4f4d\u7f6e\u4e2d\u589e\u8bbe k \u4e2a\u8def\u7531\u5668\u540e,\u4ece\u7b2c 1 \u4e2a\u8def \u7531\u5668\u5230\u7b2c 2 \u4e2a\u8def\u7531\u5668\u6700\u5c11\u7ecf\u8fc7\u7684\u4e2d\u8f6c\u8def\u7531\u5668\u7684\u4e2a\u6570\u3002","title":"\u8f93\u51fa\u683c\u5f0f"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A%20201403-4/#_5","text":"5 3 1 3 0 0 5 5 0 3 0 5 3 5 3 3 4 4 3 0","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A%20201403-4/#_6","text":"2","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A%20201403-4/#_7","text":"\u8fd9\u9053\u9898\u76ee\u7684\u57fa\u7840\u662f\u901a\u8fc7\u8282\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u5224\u65ad\u8282\u70b9\u4e4b\u95f4\u662f\u5426\u8fde\u901a\uff0c\u6c42\u51fa\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u6240\u9700\u7ecf\u8fc7\u7684\u6700\u5c0f\u4e2d\u8f6c\u6b21\u6570\u3002 \u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u662f\u56fe\u8bba\u5f53\u4e2d\u7684\u6c42\u4e24\u8282\u70b9\u4e4b\u95f4\u6700\u77ed\u8def\u5f84\u7684\u95ee\u9898\uff0c\u7b49\u540c\u4e8e\u5728\u6bcf\u5bf9\u76f4\u63a5\u8fde\u901a\u7684\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u4e3a1\u7684\u60c5\u51b5\u4e0b\uff08\u8fd9\u6837\u6c42\u51fa\u6700\u77ed\u8def\u5f84\u5c31\u7b49\u540c\u4e8e\u6c42\u51fa\u6700\u5c0f\u4e2d\u8f6c\u6b21\u6570\uff09\uff0c\u6c42\u51fa\u4e24\u8282\u70b9\u4e4b\u95f4\u6700\u77ed\u8def\u5f84\u7684\u95ee\u9898\u3002 \u7528\u7ed3\u6784\u4f53\u5b9a\u4e49\u6bcf\u4e2a\u8282\u70b9\uff0c\u7ed3\u6784\u4f53\u4e4b\u4e2d\u8bbe\u7f6e\u4e00\u4e2ak\u503c\u6765\u4ee3\u8868\u5f53\u904d\u5386\u5230\u5f53\u524d\u8282\u70b9\u65f6\u6240\u9009\u7684\u989d\u5916\u8282\u70b9\u7684\u6570\u76ee\uff0c\u901a\u8fc7\u8fd9\u4e2a\u6570\u76ee\u7684\u5927\u5c0f\u6765\u5224\u65ad\u4e0b\u4e00\u6b65\u5e94\u8be5\u5728\u4ec0\u4e48\u8303\u56f4\u7684\u8282\u70b9\u5185\u904d\u5386\u3002","title":"\u601d\u8def"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A%20201403-4/#ac","text":"#pragma GCC optimize(3, \"Ofast\", \"inline\") #include <bits/stdc++.h> #define start ios::sync_with_stdio(false);cin.tie(0);cout.tie(0); #define rep(z, x, y) for(int z=x;z<=y;++z) #define repd(z, x, y) for(int z=x;z>=y;--z) #define ft first #define sd second #define pb push_back const int maxn = 205 ; const int mod = 998244353 ; long long n , m , k , r , max1 = -1 ; bool vis [ maxn ]; using namespace std ; struct node { long long x , y , k ; int step ; node () { step = k = 0 ; } node ( int x1 , int y1 , int s1 , int k1 ) { x = x1 ; y = y1 ; step = s1 ; k = k1 ;} } mmp [ maxn ]; int bfs ( int beg , int ed ){ queue < node > Q ; Q . push ( node ( mmp [ beg ]. x , mmp [ beg ]. y , 0 , 0 )); vis [ beg ] = true ; while ( ! Q . empty ()) { node s = Q . front (); Q . pop (); if ( s . x == mmp [ ed ]. x && s . y == mmp [ ed ]. y ) return s . step - 1 ; //\u6c42\u51fa\u4e2d\u8f6c\u4e2a\u6570 if ( s . k == k ) max1 = n ; // \u5f53\u524dk\u503c\u4e00\u65e6\u5230\u8fbek\u65f6\u53ea\u80fd\u5728n\u91cc\u9762\u8d70\uff0c\u4e0d\u80fd\u7528mmp[n]\u4e4b\u5916\u7684\u8282\u70b9\u4e86 else max1 = n + m ; for ( int i = 1 ; i <= max1 ; ++ i ) { if ( vis [ i ]) continue ; if (( mmp [ i ]. x - s . x ) * ( mmp [ i ]. x - s . x ) + ( mmp [ i ]. y - s . y ) * ( mmp [ i ]. y - s . y ) > r * r ) continue ; //\u8ddd\u79bb\u4e0d\u591f\u5c31\u4e0d\u8d70 vis [ i ] = true ; int kk ; if ( i > n ) kk = s . k + 1 ; else kk = s . k ; //\u6839\u636e\u5f53\u524d\u8282\u70b9\u7684\u7c7b\u578b\u51b3\u5b9a\u662f\u5426\u52a0k\u503c Q . push ( node ( mmp [ i ]. x , mmp [ i ]. y , s . step + 1 , kk )); } } } int main () { cin >> n >> m >> k >> r ; rep ( i , 1 , n + m ) cin >> mmp [ i ]. x >> mmp [ i ]. y ; cout << bfs ( 1 , 2 ); //\u8f93\u5165\u7ed3\u679c return 0 ; }","title":"AC\u4ee3\u7801"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A201312-5/","text":"\u8bd5\u9898\u7f16\u53f7\uff1a 201312-5 \u00b6 \u8bd5\u9898\u540d\u79f0\uff1a I\u2019m stuck! \u00b6 \u65f6\u95f4\u9650\u5236\uff1a 1.0s \u00b6 \u5185\u5b58\u9650\u5236\uff1a 256.0MB \u00b6 \u95ee\u9898\u63cf\u8ff0 \u00b6 \u539f\u9898\u94fe\u63a5: http://118.190.20.162/view.page?gpid=T1 \u200b `\u7ed9\u5b9a\u4e00\u4e2aR\u884cC\u5217\u7684\u5730\u56fe\uff0c\u5730\u56fe\u7684\u6bcf\u4e00\u4e2a\u65b9\u683c\u53ef\u80fd\u662f'#', '+', '-', '|', '.', 'S', 'T'\u4e03\u4e2a\u5b57\u7b26\u4e2d\u7684\u4e00\u4e2a\uff0c\u5206\u522b\u8868\u793a\u5982\u4e0b\u610f\u601d\uff1a \u3000\u3000' # ': \u4efb\u4f55\u65f6\u5019\u73a9\u5bb6\u90fd\u4e0d\u80fd\u79fb\u52a8\u5230\u6b64\u65b9\u683c\uff1b \u3000\u3000' + ': \u5f53\u73a9\u5bb6\u5230\u8fbe\u8fd9\u4e00\u65b9\u683c\u540e\uff0c\u4e0b\u4e00\u6b65\u53ef\u4ee5\u5411\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u76f8\u90bb\u7684\u4efb\u610f\u4e00\u4e2a\u975e'#'\u65b9\u683c\u79fb\u52a8\u4e00\u683c\uff1b \u3000\u3000' - ': \u5f53\u73a9\u5bb6\u5230\u8fbe\u8fd9\u4e00\u65b9\u683c\u540e\uff0c\u4e0b\u4e00\u6b65\u53ef\u4ee5\u5411\u5de6\u53f3\u4e24\u4e2a\u65b9\u5411\u76f8\u90bb\u7684\u4e00\u4e2a\u975e'#'\u65b9\u683c\u79fb\u52a8\u4e00\u683c\uff1b \u3000\u3000' | ': \u5f53\u73a9\u5bb6\u5230\u8fbe\u8fd9\u4e00\u65b9\u683c\u540e\uff0c\u4e0b\u4e00\u6b65\u53ef\u4ee5\u5411\u4e0a\u4e0b\u4e24\u4e2a\u65b9\u5411\u76f8\u90bb\u7684\u4e00\u4e2a\u975e'#'\u65b9\u683c\u79fb\u52a8\u4e00\u683c\uff1b \u3000\u3000' . ': \u5f53\u73a9\u5bb6\u5230\u8fbe\u8fd9\u4e00\u65b9\u683c\u540e\uff0c\u4e0b\u4e00\u6b65\u53ea\u80fd\u5411\u4e0b\u79fb\u52a8\u4e00\u683c\u3002\u5982\u679c\u4e0b\u9762\u76f8\u90bb\u7684\u65b9\u683c\u4e3a'#'\uff0c\u5219\u73a9\u5bb6\u4e0d\u80fd\u518d\u79fb\u52a8\uff1b \u3000\u3000' S ': \u73a9\u5bb6\u7684\u521d\u59cb\u4f4d\u7f6e\uff0c\u5730\u56fe\u4e2d\u53ea\u4f1a\u6709\u4e00\u4e2a\u521d\u59cb\u4f4d\u7f6e\u3002\u73a9\u5bb6\u5230\u8fbe\u8fd9\u4e00\u65b9\u683c\u540e\uff0c\u4e0b\u4e00\u6b65\u53ef\u4ee5\u5411\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u76f8\u90bb\u7684\u4efb\u610f\u4e00\u4e2a\u975e'#'\u65b9\u683c\u79fb\u52a8\u4e00\u683c\uff1b \u3000\u3000'T': \u73a9\u5bb6\u7684\u76ee\u6807\u4f4d\u7f6e\uff0c\u5730\u56fe\u4e2d\u53ea\u4f1a\u6709\u4e00\u4e2a\u76ee\u6807\u4f4d\u7f6e\u3002\u73a9\u5bb6\u5230\u8fbe\u8fd9\u4e00\u65b9\u683c\u540e\uff0c\u53ef\u4ee5\u9009\u62e9\u5b8c\u6210\u4efb\u52a1\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u4e0d\u5b8c\u6210\u4efb\u52a1\u7ee7\u7eed\u79fb\u52a8\u3002\u5982\u679c\u7ee7\u7eed\u79fb\u52a8\u4e0b\u4e00\u6b65\u53ef\u4ee5\u5411\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u76f8\u90bb\u7684\u4efb\u610f\u4e00\u4e2a\u975e'#'\u65b9\u683c\u79fb\u52a8\u4e00\u683c\u3002 \u3000\u3000\u6b64\u5916\uff0c\u73a9\u5bb6\u4e0d\u80fd\u79fb\u52a8\u51fa\u5730\u56fe\u3002 \u3000\u3000\u8bf7\u627e\u51fa\u6ee1\u8db3\u4e0b\u9762\u4e24\u4e2a\u6027\u8d28\u7684\u65b9\u683c\u4e2a\u6570\uff1a \u73a9\u5bb6\u53ef\u4ee5\u4ece\u521d\u59cb\u4f4d\u7f6e\u79fb\u52a8\u5230\u6b64\u65b9\u683c\uff1b \u73a9\u5bb6\u4e0d\u53ef\u4ee5\u4ece\u6b64\u65b9\u683c\u79fb\u52a8\u5230\u76ee\u6807\u4f4d\u7f6e\u3002 \u8f93\u5165\u683c\u5f0f \u00b6 \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u62ec\u4e24\u4e2a\u6574\u6570R \u548cC\uff0c\u5206\u522b\u8868\u793a\u5730\u56fe\u7684\u884c\u548c\u5217\u6570\u3002(1 \u2264 R, C \u2264 50)\u3002 \u3000\u3000\u63a5\u4e0b\u6765\u7684R\u884c\u6bcf\u884c\u90fd\u5305\u542bC\u4e2a\u5b57\u7b26\u3002\u5b83\u4eec\u8868\u793a\u5730\u56fe\u7684\u683c\u5b50\u3002\u5730\u56fe\u4e0a\u6070\u597d\u6709\u4e00\u4e2a'S'\u548c\u4e00\u4e2a'T'\u3002 \u8f93\u51fa\u683c\u5f0f \u00b6 \u5982\u679c\u73a9\u5bb6\u5728\u521d\u59cb\u4f4d\u7f6e\u5c31\u5df2\u7ecf\u4e0d\u80fd\u5230\u8fbe\u7ec8\u70b9\u4e86\uff0c\u5c31\u8f93\u51fa\u201cI'm stuck!\u201d\uff08\u4e0d\u542b\u53cc\u5f15\u53f7\uff09\u3002\u5426\u5219\u7684\u8bdd\uff0c\u8f93\u51fa\u6ee1\u8db3\u6027\u8d28\u7684\u65b9\u683c\u7684\u4e2a\u6570\u3002 \u6837\u4f8b\u8f93\u5165 \u00b6 5 5 --+-+ ..|#. ..|## S-+-T . \u00b6 \u6837\u4f8b\u8f93\u51fa \u00b6 2 \u6837\u4f8b\u8bf4\u660e \u00b6 \u5982\u679c\u628a\u6ee1\u8db3\u6027\u8d28\u7684\u65b9\u683c\u5728\u5730\u56fe\u4e0a\u7528'X'\u6807\u8bb0\u51fa\u6765\u7684\u8bdd\uff0c\u5730\u56fe\u5982\u4e0b\u6240\u793a\uff1a --+-+ ..|#X ..|## S-+-T X \u00b6 \u9898\u610f \u00b6 \u6839\u636e\u9898\u610f\u6a21\u62df\u5373\u53ef\u3002\u6b64\u9898\u7ec6\u8282\u8f83\u591a\uff0c\u503c\u5f97\u6ce8\u610f\u3002 \u601d\u8def \u00b6 \u4eceS\u70b9\u5f00\u59cb\u641c\u7d22\u627e\u5230\u6240\u6709\u80fd\u5230\u8fbe\u7684\u70b9\u3002\u4ece\u6240\u6709\u80fd\u5230\u8fbe\u7684\u70b9\u5f00\u59cb\u518d\u8fdb\u884c\u641c\u7d22\u627e\u5230\u7b54\u6848\u5373\u53ef\u3002 AC\u4ee3\u7801 \u00b6 #pragma GCC optimize(3, \"Ofast\", \"inline\") #include <bits/stdc++.h> #define start ios::sync_with_stdio(false);cin.tie(0);cout.tie(0); #define rep(z, x, y) for(int z=x;z<=y;++z) #define repd(z, x, y) for(int z=x;z>=y;--z) #define ft first #define sd second #define pb push_back const int maxn = 50 + 5 ; const int mod = 998244353 ; const int inf = 0x3f3f3f3f ; using namespace std ; char mmp [ maxn ][ maxn ]; int n , m ; bool vis [ maxn ][ maxn ], stk ; int walk [ 4 ][ 2 ] = {{ 1 , 0 },{ -1 , 0 },{ 0 , 1 },{ 0 , -1 }}; struct poi { poi ( int _x = 0 , int _y = 0 , char _val = 'a' ) : x ( _x ), y ( _y ), val ( _val ){} int x , y ; char val ; } beg , ed ; bool check ( int dx , int dy ){ if ( dx >= 1 && dx <= n && dy >= 1 && dy <= m && mmp [ dx ][ dy ] != '#' && ! vis [ dx ][ dy ]) return true ; else return false ; } void bfs ( poi beg ){ queue < poi > ss ; ss . push ( beg ); vis [ beg . x ][ beg . y ] = 1 ; while ( ! ss . empty ()){ poi temp = ss . front (); ss . pop (); int dx = 0 , dy = 0 ; if ( temp . val == 'S' || temp . val == '+' || temp . val == 'T' ){ rep ( i , 0 , 3 ){ dx = temp . x + walk [ i ][ 0 ]; dy = temp . y + walk [ i ][ 1 ]; if ( check ( dx , dy )){ vis [ dx ][ dy ] = 1 ; ss . push ( poi ( dx , dy , mmp [ dx ][ dy ])); } } } else if ( temp . val == '-' ){ rep ( i , 2 , 3 ){ dx = temp . x ; dy = temp . y + walk [ i ][ 1 ]; if ( check ( dx , dy )){ vis [ dx ][ dy ] = 1 ; ss . push ( poi ( dx , dy , mmp [ dx ][ dy ])); } } } else if ( temp . val == '.' ){ dx = temp . x + 1 ; dy = temp . y ; if ( check ( dx , dy )){ vis [ dx ][ dy ] = 1 ; ss . push ( poi ( dx , dy , mmp [ dx ][ dy ])); } } else if ( temp . val == '|' ){ rep ( i , 0 , 1 ){ dx = temp . x + walk [ i ][ 0 ]; dy = temp . y ; if ( check ( dx , dy )){ vis [ dx ][ dy ] = 1 ; ss . push ( poi ( dx , dy , mmp [ dx ][ dy ])); } } } } } bool bfs2 ( poi p ){ queue < poi > ss ; ss . push ( p ); while ( ! ss . empty ()){ poi temp = ss . front (); ss . pop (); if ( temp . val == 'T' ){ return false ; } int dx = 0 , dy = 0 ; if ( temp . val == 'S' || temp . val == '+' || temp . val == 'T' ){ rep ( i , 0 , 3 ){ dx = temp . x + walk [ i ][ 0 ]; dy = temp . y + walk [ i ][ 1 ]; if ( check ( dx , dy )){ vis [ dx ][ dy ] = 1 ; ss . push ( poi ( dx , dy , mmp [ dx ][ dy ])); } } } else if ( temp . val == '-' ){ rep ( i , 2 , 3 ){ dx = temp . x ; dy = temp . y + walk [ i ][ 1 ]; if ( check ( dx , dy )){ vis [ dx ][ dy ] = 1 ; ss . push ( poi ( dx , dy , mmp [ dx ][ dy ])); } } } else if ( temp . val == '.' ){ dx = temp . x + 1 ; dy = temp . y ; if ( check ( dx , dy )){ vis [ dx ][ dy ] = 1 ; ss . push ( poi ( dx , dy , mmp [ dx ][ dy ])); } } else if ( temp . val == '|' ){ rep ( i , 0 , 1 ){ dx = temp . x + walk [ i ][ 0 ]; dy = temp . y ; if ( check ( dx , dy )){ vis [ dx ][ dy ] = 1 ; ss . push ( poi ( dx , dy , mmp [ dx ][ dy ])); } } } } return true ; } int main () { start ; cin >> n >> m ; rep ( i , 1 , n ){ rep ( j , 1 , m ){ cin >> mmp [ i ][ j ]; if ( mmp [ i ][ j ] == 'S' ) beg = poi ( i , j , mmp [ i ][ j ]); else if ( mmp [ i ][ j ] == 'T' ) ed = poi ( i , j , mmp [ i ][ j ]); } } bfs ( beg ); /* rep(i,1,n){ rep(j,1,m){ if(vis[i][j]) cout<<mmp[i][j]<<' '; else cout<<'#'<<' '; } cout<<endl; }*/ if ( ! vis [ ed . x ][ ed . y ]) cout << \"I'm stuck! \\n \" ; else { int cnt = 0 ; queue < poi > t ; rep ( i , 1 , n ) rep ( j , 1 , m ) if ( vis [ i ][ j ]) t . push ( poi ( i , j , mmp [ i ][ j ])); while ( ! t . empty ()){ poi tt = t . front (); t . pop (); memset ( vis , 0 , sizeof vis ); if ( bfs2 ( tt )) cnt ++ ; } cout << cnt << endl ; } return 0 ; }","title":"201312-5"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A201312-5/#201312-5","text":"","title":"\u8bd5\u9898\u7f16\u53f7\uff1a 201312-5"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A201312-5/#im-stuck","text":"","title":"\u8bd5\u9898\u540d\u79f0\uff1a I\u2019m stuck!"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A201312-5/#10s","text":"","title":"\u65f6\u95f4\u9650\u5236\uff1a   1.0s"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A201312-5/#2560mb","text":"","title":"\u5185\u5b58\u9650\u5236\uff1a    256.0MB"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A201312-5/#_1","text":"\u539f\u9898\u94fe\u63a5: http://118.190.20.162/view.page?gpid=T1 \u200b `\u7ed9\u5b9a\u4e00\u4e2aR\u884cC\u5217\u7684\u5730\u56fe\uff0c\u5730\u56fe\u7684\u6bcf\u4e00\u4e2a\u65b9\u683c\u53ef\u80fd\u662f'#', '+', '-', '|', '.', 'S', 'T'\u4e03\u4e2a\u5b57\u7b26\u4e2d\u7684\u4e00\u4e2a\uff0c\u5206\u522b\u8868\u793a\u5982\u4e0b\u610f\u601d\uff1a \u3000\u3000' # ': \u4efb\u4f55\u65f6\u5019\u73a9\u5bb6\u90fd\u4e0d\u80fd\u79fb\u52a8\u5230\u6b64\u65b9\u683c\uff1b \u3000\u3000' + ': \u5f53\u73a9\u5bb6\u5230\u8fbe\u8fd9\u4e00\u65b9\u683c\u540e\uff0c\u4e0b\u4e00\u6b65\u53ef\u4ee5\u5411\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u76f8\u90bb\u7684\u4efb\u610f\u4e00\u4e2a\u975e'#'\u65b9\u683c\u79fb\u52a8\u4e00\u683c\uff1b \u3000\u3000' - ': \u5f53\u73a9\u5bb6\u5230\u8fbe\u8fd9\u4e00\u65b9\u683c\u540e\uff0c\u4e0b\u4e00\u6b65\u53ef\u4ee5\u5411\u5de6\u53f3\u4e24\u4e2a\u65b9\u5411\u76f8\u90bb\u7684\u4e00\u4e2a\u975e'#'\u65b9\u683c\u79fb\u52a8\u4e00\u683c\uff1b \u3000\u3000' | ': \u5f53\u73a9\u5bb6\u5230\u8fbe\u8fd9\u4e00\u65b9\u683c\u540e\uff0c\u4e0b\u4e00\u6b65\u53ef\u4ee5\u5411\u4e0a\u4e0b\u4e24\u4e2a\u65b9\u5411\u76f8\u90bb\u7684\u4e00\u4e2a\u975e'#'\u65b9\u683c\u79fb\u52a8\u4e00\u683c\uff1b \u3000\u3000' . ': \u5f53\u73a9\u5bb6\u5230\u8fbe\u8fd9\u4e00\u65b9\u683c\u540e\uff0c\u4e0b\u4e00\u6b65\u53ea\u80fd\u5411\u4e0b\u79fb\u52a8\u4e00\u683c\u3002\u5982\u679c\u4e0b\u9762\u76f8\u90bb\u7684\u65b9\u683c\u4e3a'#'\uff0c\u5219\u73a9\u5bb6\u4e0d\u80fd\u518d\u79fb\u52a8\uff1b \u3000\u3000' S ': \u73a9\u5bb6\u7684\u521d\u59cb\u4f4d\u7f6e\uff0c\u5730\u56fe\u4e2d\u53ea\u4f1a\u6709\u4e00\u4e2a\u521d\u59cb\u4f4d\u7f6e\u3002\u73a9\u5bb6\u5230\u8fbe\u8fd9\u4e00\u65b9\u683c\u540e\uff0c\u4e0b\u4e00\u6b65\u53ef\u4ee5\u5411\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u76f8\u90bb\u7684\u4efb\u610f\u4e00\u4e2a\u975e'#'\u65b9\u683c\u79fb\u52a8\u4e00\u683c\uff1b \u3000\u3000'T': \u73a9\u5bb6\u7684\u76ee\u6807\u4f4d\u7f6e\uff0c\u5730\u56fe\u4e2d\u53ea\u4f1a\u6709\u4e00\u4e2a\u76ee\u6807\u4f4d\u7f6e\u3002\u73a9\u5bb6\u5230\u8fbe\u8fd9\u4e00\u65b9\u683c\u540e\uff0c\u53ef\u4ee5\u9009\u62e9\u5b8c\u6210\u4efb\u52a1\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u4e0d\u5b8c\u6210\u4efb\u52a1\u7ee7\u7eed\u79fb\u52a8\u3002\u5982\u679c\u7ee7\u7eed\u79fb\u52a8\u4e0b\u4e00\u6b65\u53ef\u4ee5\u5411\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u76f8\u90bb\u7684\u4efb\u610f\u4e00\u4e2a\u975e'#'\u65b9\u683c\u79fb\u52a8\u4e00\u683c\u3002 \u3000\u3000\u6b64\u5916\uff0c\u73a9\u5bb6\u4e0d\u80fd\u79fb\u52a8\u51fa\u5730\u56fe\u3002 \u3000\u3000\u8bf7\u627e\u51fa\u6ee1\u8db3\u4e0b\u9762\u4e24\u4e2a\u6027\u8d28\u7684\u65b9\u683c\u4e2a\u6570\uff1a \u73a9\u5bb6\u53ef\u4ee5\u4ece\u521d\u59cb\u4f4d\u7f6e\u79fb\u52a8\u5230\u6b64\u65b9\u683c\uff1b \u73a9\u5bb6\u4e0d\u53ef\u4ee5\u4ece\u6b64\u65b9\u683c\u79fb\u52a8\u5230\u76ee\u6807\u4f4d\u7f6e\u3002","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A201312-5/#_2","text":"\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u62ec\u4e24\u4e2a\u6574\u6570R \u548cC\uff0c\u5206\u522b\u8868\u793a\u5730\u56fe\u7684\u884c\u548c\u5217\u6570\u3002(1 \u2264 R, C \u2264 50)\u3002 \u3000\u3000\u63a5\u4e0b\u6765\u7684R\u884c\u6bcf\u884c\u90fd\u5305\u542bC\u4e2a\u5b57\u7b26\u3002\u5b83\u4eec\u8868\u793a\u5730\u56fe\u7684\u683c\u5b50\u3002\u5730\u56fe\u4e0a\u6070\u597d\u6709\u4e00\u4e2a'S'\u548c\u4e00\u4e2a'T'\u3002","title":"\u8f93\u5165\u683c\u5f0f"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A201312-5/#_3","text":"\u5982\u679c\u73a9\u5bb6\u5728\u521d\u59cb\u4f4d\u7f6e\u5c31\u5df2\u7ecf\u4e0d\u80fd\u5230\u8fbe\u7ec8\u70b9\u4e86\uff0c\u5c31\u8f93\u51fa\u201cI'm stuck!\u201d\uff08\u4e0d\u542b\u53cc\u5f15\u53f7\uff09\u3002\u5426\u5219\u7684\u8bdd\uff0c\u8f93\u51fa\u6ee1\u8db3\u6027\u8d28\u7684\u65b9\u683c\u7684\u4e2a\u6570\u3002","title":"\u8f93\u51fa\u683c\u5f0f"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A201312-5/#_4","text":"5 5 --+-+ ..|#. ..|## S-+-T","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A201312-5/#_5","text":"","title":"."},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A201312-5/#_6","text":"2","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A201312-5/#_7","text":"\u5982\u679c\u628a\u6ee1\u8db3\u6027\u8d28\u7684\u65b9\u683c\u5728\u5730\u56fe\u4e0a\u7528'X'\u6807\u8bb0\u51fa\u6765\u7684\u8bdd\uff0c\u5730\u56fe\u5982\u4e0b\u6240\u793a\uff1a --+-+ ..|#X ..|## S-+-T","title":"\u6837\u4f8b\u8bf4\u660e"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A201312-5/#x","text":"","title":"X"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A201312-5/#_8","text":"\u6839\u636e\u9898\u610f\u6a21\u62df\u5373\u53ef\u3002\u6b64\u9898\u7ec6\u8282\u8f83\u591a\uff0c\u503c\u5f97\u6ce8\u610f\u3002","title":"\u9898\u610f"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A201312-5/#_9","text":"\u4eceS\u70b9\u5f00\u59cb\u641c\u7d22\u627e\u5230\u6240\u6709\u80fd\u5230\u8fbe\u7684\u70b9\u3002\u4ece\u6240\u6709\u80fd\u5230\u8fbe\u7684\u70b9\u5f00\u59cb\u518d\u8fdb\u884c\u641c\u7d22\u627e\u5230\u7b54\u6848\u5373\u53ef\u3002","title":"\u601d\u8def"},{"location":"mm/%E8%AF%95%E9%A2%98%E7%BC%96%E5%8F%B7%EF%BC%9A201312-5/#ac","text":"#pragma GCC optimize(3, \"Ofast\", \"inline\") #include <bits/stdc++.h> #define start ios::sync_with_stdio(false);cin.tie(0);cout.tie(0); #define rep(z, x, y) for(int z=x;z<=y;++z) #define repd(z, x, y) for(int z=x;z>=y;--z) #define ft first #define sd second #define pb push_back const int maxn = 50 + 5 ; const int mod = 998244353 ; const int inf = 0x3f3f3f3f ; using namespace std ; char mmp [ maxn ][ maxn ]; int n , m ; bool vis [ maxn ][ maxn ], stk ; int walk [ 4 ][ 2 ] = {{ 1 , 0 },{ -1 , 0 },{ 0 , 1 },{ 0 , -1 }}; struct poi { poi ( int _x = 0 , int _y = 0 , char _val = 'a' ) : x ( _x ), y ( _y ), val ( _val ){} int x , y ; char val ; } beg , ed ; bool check ( int dx , int dy ){ if ( dx >= 1 && dx <= n && dy >= 1 && dy <= m && mmp [ dx ][ dy ] != '#' && ! vis [ dx ][ dy ]) return true ; else return false ; } void bfs ( poi beg ){ queue < poi > ss ; ss . push ( beg ); vis [ beg . x ][ beg . y ] = 1 ; while ( ! ss . empty ()){ poi temp = ss . front (); ss . pop (); int dx = 0 , dy = 0 ; if ( temp . val == 'S' || temp . val == '+' || temp . val == 'T' ){ rep ( i , 0 , 3 ){ dx = temp . x + walk [ i ][ 0 ]; dy = temp . y + walk [ i ][ 1 ]; if ( check ( dx , dy )){ vis [ dx ][ dy ] = 1 ; ss . push ( poi ( dx , dy , mmp [ dx ][ dy ])); } } } else if ( temp . val == '-' ){ rep ( i , 2 , 3 ){ dx = temp . x ; dy = temp . y + walk [ i ][ 1 ]; if ( check ( dx , dy )){ vis [ dx ][ dy ] = 1 ; ss . push ( poi ( dx , dy , mmp [ dx ][ dy ])); } } } else if ( temp . val == '.' ){ dx = temp . x + 1 ; dy = temp . y ; if ( check ( dx , dy )){ vis [ dx ][ dy ] = 1 ; ss . push ( poi ( dx , dy , mmp [ dx ][ dy ])); } } else if ( temp . val == '|' ){ rep ( i , 0 , 1 ){ dx = temp . x + walk [ i ][ 0 ]; dy = temp . y ; if ( check ( dx , dy )){ vis [ dx ][ dy ] = 1 ; ss . push ( poi ( dx , dy , mmp [ dx ][ dy ])); } } } } } bool bfs2 ( poi p ){ queue < poi > ss ; ss . push ( p ); while ( ! ss . empty ()){ poi temp = ss . front (); ss . pop (); if ( temp . val == 'T' ){ return false ; } int dx = 0 , dy = 0 ; if ( temp . val == 'S' || temp . val == '+' || temp . val == 'T' ){ rep ( i , 0 , 3 ){ dx = temp . x + walk [ i ][ 0 ]; dy = temp . y + walk [ i ][ 1 ]; if ( check ( dx , dy )){ vis [ dx ][ dy ] = 1 ; ss . push ( poi ( dx , dy , mmp [ dx ][ dy ])); } } } else if ( temp . val == '-' ){ rep ( i , 2 , 3 ){ dx = temp . x ; dy = temp . y + walk [ i ][ 1 ]; if ( check ( dx , dy )){ vis [ dx ][ dy ] = 1 ; ss . push ( poi ( dx , dy , mmp [ dx ][ dy ])); } } } else if ( temp . val == '.' ){ dx = temp . x + 1 ; dy = temp . y ; if ( check ( dx , dy )){ vis [ dx ][ dy ] = 1 ; ss . push ( poi ( dx , dy , mmp [ dx ][ dy ])); } } else if ( temp . val == '|' ){ rep ( i , 0 , 1 ){ dx = temp . x + walk [ i ][ 0 ]; dy = temp . y ; if ( check ( dx , dy )){ vis [ dx ][ dy ] = 1 ; ss . push ( poi ( dx , dy , mmp [ dx ][ dy ])); } } } } return true ; } int main () { start ; cin >> n >> m ; rep ( i , 1 , n ){ rep ( j , 1 , m ){ cin >> mmp [ i ][ j ]; if ( mmp [ i ][ j ] == 'S' ) beg = poi ( i , j , mmp [ i ][ j ]); else if ( mmp [ i ][ j ] == 'T' ) ed = poi ( i , j , mmp [ i ][ j ]); } } bfs ( beg ); /* rep(i,1,n){ rep(j,1,m){ if(vis[i][j]) cout<<mmp[i][j]<<' '; else cout<<'#'<<' '; } cout<<endl; }*/ if ( ! vis [ ed . x ][ ed . y ]) cout << \"I'm stuck! \\n \" ; else { int cnt = 0 ; queue < poi > t ; rep ( i , 1 , n ) rep ( j , 1 , m ) if ( vis [ i ][ j ]) t . push ( poi ( i , j , mmp [ i ][ j ])); while ( ! t . empty ()){ poi tt = t . front (); t . pop (); memset ( vis , 0 , sizeof vis ); if ( bfs2 ( tt )) cnt ++ ; } cout << cnt << endl ; } return 0 ; }","title":"AC\u4ee3\u7801"},{"location":"vj/t1/","text":"","title":"Data structure"},{"location":"vj/kb/t1/FZU%202150%20Fire%20Game/","text":"","title":"FZU 2150 Fire Game"},{"location":"vj/kb/t1/HDU%201241%20Oil%20Deposits/","text":"","title":"HDU 1241 Oil Deposits"},{"location":"vj/kb/t1/HDU%201495%20%E9%9D%9E%E5%B8%B8%E5%8F%AF%E4%B9%90/","text":"","title":"HDU 1495 \u975e\u5e38\u53ef\u4e50"},{"location":"vj/kb/t1/HDU%202612%20Find%20a%20way/","text":"","title":"HDU 2612 Find a way"},{"location":"vj/kb/t1/POJ%201321%20%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/","text":"POJ - 1321 \u68cb\u76d8\u95ee\u9898 \u00b6 #include <iostream> #include <cstring> using namespace std ; #define maxn 9 int mmp [ maxn ][ maxn ]; bool checky [ maxn ]; long long n , k , ans ; void dfs ( long long x , long long num ){ if ( num == k ){ //cout<<x<<endl; ans ++ ; return ; } for ( long long i = x + 1 ; i <= n ; i ++ ){ for ( long long j = 1 ; j <= n ; j ++ ){ if ( mmp [ i ][ j ] &&! checky [ j ]){ checky [ j ] = true ; dfs ( i , num + 1 ); checky [ j ] = false ; } } } } int main (){ char get ; while ( cin >> n >> k ){ if ( n == -1 && k == -1 ){ break ; } ans = 0 ; memset ( mmp , 0 , sizeof ( mmp )); memset ( checky , 0 , sizeof ( checky )); for ( long long i = 1 ; i <= n ; i ++ ){ for ( long long j = 1 ; j <= n ; j ++ ){ cin >> get ; if ( get == '#' ) mmp [ i ][ j ] = 1 ; } } dfs ( 0 , 0 ); cout << ans << endl ; } return 0 ; }","title":"POJ 1321 \u68cb\u76d8\u95ee\u9898"},{"location":"vj/kb/t1/POJ%201321%20%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/#poj-1321","text":"#include <iostream> #include <cstring> using namespace std ; #define maxn 9 int mmp [ maxn ][ maxn ]; bool checky [ maxn ]; long long n , k , ans ; void dfs ( long long x , long long num ){ if ( num == k ){ //cout<<x<<endl; ans ++ ; return ; } for ( long long i = x + 1 ; i <= n ; i ++ ){ for ( long long j = 1 ; j <= n ; j ++ ){ if ( mmp [ i ][ j ] &&! checky [ j ]){ checky [ j ] = true ; dfs ( i , num + 1 ); checky [ j ] = false ; } } } } int main (){ char get ; while ( cin >> n >> k ){ if ( n == -1 && k == -1 ){ break ; } ans = 0 ; memset ( mmp , 0 , sizeof ( mmp )); memset ( checky , 0 , sizeof ( checky )); for ( long long i = 1 ; i <= n ; i ++ ){ for ( long long j = 1 ; j <= n ; j ++ ){ cin >> get ; if ( get == '#' ) mmp [ i ][ j ] = 1 ; } } dfs ( 0 , 0 ); cout << ans << endl ; } return 0 ; }","title":"POJ - 1321 \u68cb\u76d8\u95ee\u9898"},{"location":"vj/kb/t1/POJ%201426%20Find%20The%20Multiple/","text":"","title":"POJ 1426 Find The Multiple"},{"location":"vj/kb/t1/POJ%202251%20Dungeon%20Master/","text":"","title":"POJ 2251 Dungeon Master"},{"location":"vj/kb/t1/POJ%203087%20Shuffle%27m%20Up/","text":"","title":"POJ 3087 Shuffle'm Up"},{"location":"vj/kb/t1/POJ%203126%20Prime%20Path/","text":"","title":"POJ 3126 Prime Path"},{"location":"vj/kb/t1/POJ%203278%20Catch%20That%20Cow/","text":"","title":"POJ 3278 Catch That Cow"},{"location":"vj/kb/t1/POJ%203279%20Fliptile/","text":"","title":"POJ 3279 Fliptile"},{"location":"vj/kb/t1/POJ%203414%20Pots/","text":"","title":"POJ 3414 Pots"},{"location":"vj/kb/t1/POJ%203984%20%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/","text":"","title":"POJ 3984 \u8ff7\u5bab\u95ee\u9898"},{"location":"vj/kb/t1/UVA%2011624%20Fire%21/","text":"","title":"UVA 11624 Fire!"}]}